<channel>
  <id>15c014f3-9383-4635-b787-3e93a42f6447</id>
  <name>Q_RIS_ORM_EPR</name>
  <description>DEPLOY subscribing  channel for radiology ORM messages.&#xd;
$Rev: 338 $ $Id: Q_RIS_ORM_EPR.xml 338 2012-11-15 08:57:54Z MarkD $&#xd;
Rowthorne version&#xd;
Non DB queue&#xd;
&#xd;
20-08-12	MRD	cloned from DB queue version&#xd;
&#xd;
</description>
  <enabled>true</enabled>
  <version>2.2.1.5861</version>
  <lastModified>
    <time>1345461754396</time>
    <timezone>Europe/London</timezone>
  </lastModified>
  <revision>24</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">None</property>
    </properties>
    <transformer>
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>HL7V2</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">true</property>
      </inboundProperties>
      <outboundProperties>
        <property name="convertLFtoCR">true</property>
        <property name="handleRepetitions">true</property>
        <property name="handleSubcomponents">true</property>
        <property name="stripNamespaces">true</property>
        <property name="useStrictParser">false</property>
        <property name="useStrictValidation">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.2.1.5861</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>ORG-destination</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">sink</property>
        <property name="synchronised">0</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>main</name>
            <script>// MRD: 17/05/2011

// EPR can not accept application acknowledgements
// If CRIS returns an ORG containing an exception 
// we need to send an EMAIL to someone from the TIE


try {
	// get the acknowledgement code
	var orderControlCode = msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString();

	if(orderControlCode != &quot;OK&quot;) {
	
	// analyse exception
		var exceptionName = &quot;&quot;;
	
		switch (orderControlCode){
			case &apos;UA&apos; :
				exceptionName = &quot;CRIS unable to accept new order.&quot;;
				break;	
			case &apos;UC&apos; :
				exceptionName = &quot;CRIS unable to accept order cancelation.&quot;;
				break;
			case &apos;OC&apos; :
				exceptionName = &quot;CRIS accepted order cancelation.&quot;;
				break;
			case &apos;OK&apos; :
				exceptionName = &quot;CRIS accepted message.&quot;;
				break;
			default :
				exceptionName = &quot;CRIS unable to accept order message - unknown reason.&quot;;
				break;
		}				
		// log error
		//logger.error(&apos;exceptionName&apos;);	

		// Compose email body
		var eprOrderNum = msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString();
		var examName = msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString();
        var reason =  msg[&apos;ORC&apos;][&apos;ORC.16&apos;][&apos;ORC.16.2&apos;].toString();
		var org = msg[&apos;OBR&apos;][&apos;OBR.19&apos;][&apos;OBR.19.1&apos;].toString();
		var patID = &apos;&apos;;
		
		// extract MRN from message
		patID = getPID(msg[&apos;PID&apos;][&apos;PID.3&apos;],&apos;RBF03&apos;,&apos;MR&apos;,&apos;PID.3.4&apos;,&apos;PID.3.5&apos;,&apos;PID.3.1&apos;);
		if(patID == &apos;&apos;) patID = &apos;No MRN present in PID3!&apos;; 	

		var emailBody = exceptionName + &quot; &quot;
                    + &quot;MRN: &quot; + patID
                    + &quot;  Order Number: &quot; + 	&apos; &apos; + eprOrderNum
					+ &quot;  Exam Name: &quot; + examName
					+ &quot;  Reason: &quot; + reason;				

		
		// send email
		var smtpConn = SMTPConnectionFactory.createSMTPConnection();
		
		smtpConn.send(&quot;TIEsupport@ohis.nhs.uk&quot;,
                      	&quot;&quot;,
                       	&quot;oxnettieprod01@ohis.nhs.uk&quot;,
                       	exceptionName,
                       	emailBody);

	}
}
catch (e) {
	logger.error(&quot;Channel &quot; + getChannelName() + &quot; ( ORG destination transformer ) &quot; + e.toString());
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>// MRD: 17/05/2011

// EPR can not accept application acknowledgements
// If CRIS returns an ORG containing an exception 
// we need to send an EMAIL to someone from the TIE


try {
	// get the acknowledgement code
	var orderControlCode = msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString();

	if(orderControlCode != &quot;OK&quot;) {
	
	// analyse exception
		var exceptionName = &quot;&quot;;
	
		switch (orderControlCode){
			case &apos;UA&apos; :
				exceptionName = &quot;CRIS unable to accept new order.&quot;;
				break;	
			case &apos;UC&apos; :
				exceptionName = &quot;CRIS unable to accept order cancelation.&quot;;
				break;
			case &apos;OC&apos; :
				exceptionName = &quot;CRIS accepted order cancelation.&quot;;
				break;
			case &apos;OK&apos; :
				exceptionName = &quot;CRIS accepted message.&quot;;
				break;
			default :
				exceptionName = &quot;CRIS unable to accept order message - unknown reason.&quot;;
				break;
		}				
		// log error
		//logger.error(&apos;exceptionName&apos;);	

		// Compose email body
		var eprOrderNum = msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString();
		var examName = msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString();
        var reason =  msg[&apos;ORC&apos;][&apos;ORC.16&apos;][&apos;ORC.16.2&apos;].toString();
		var org = msg[&apos;OBR&apos;][&apos;OBR.19&apos;][&apos;OBR.19.1&apos;].toString();
		var patID = &apos;&apos;;
		
		// extract MRN from message
		patID = getPID(msg[&apos;PID&apos;][&apos;PID.3&apos;],&apos;RBF03&apos;,&apos;MR&apos;,&apos;PID.3.4&apos;,&apos;PID.3.5&apos;,&apos;PID.3.1&apos;);
		if(patID == &apos;&apos;) patID = &apos;No MRN present in PID3!&apos;; 	

		var emailBody = exceptionName + &quot; &quot;
                    + &quot;MRN: &quot; + patID
                    + &quot;  Order Number: &quot; + 	&apos; &apos; + eprOrderNum
					+ &quot;  Exam Name: &quot; + examName
					+ &quot;  Reason: &quot; + reason;				

		
		// send email
		var smtpConn = SMTPConnectionFactory.createSMTPConnection();
		
		smtpConn.send(&quot;TIEsupport@ohis.nhs.uk&quot;,
                      	&quot;&quot;,
                       	&quot;oxnettieprod01@ohis.nhs.uk&quot;,
                       	exceptionName,
                       	emailBody);

	}
}
catch (e) {
	logger.error(&quot;Channel &quot; + getChannelName() + &quot; ( ORG destination transformer ) &quot; + e.toString());
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>Local Functions</name>
            <script>//Gets id from PID3 by assiginer code and type
//Throws custom error if code exception
function getPID(SEGn, assigner_code, type_code,pos1,pos2,pos3) {
	var pid = &apos;&apos;;
	try {
		var pidcount = SEGn.length();
		for(var index = 0; index &lt; pidcount; index++)
		{
			if(SEGn[pos1][index] != null &amp;&amp; SEGn[pos2][index] != null) {
				if(SEGn[pos1][index].toString() == assigner_code &amp;&amp; SEGn[pos2][index].toString() == type_code) 
				{
					pid = SEGn[pos3][index].toString();
					break;
				}
			}

		}
		return pid;
	}
	catch (e) {
    	throw new Error(&quot; in getPID &quot; + e.toString());
	}
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>//Gets id from PID3 by assiginer code and type
//Throws custom error if code exception
function getPID(SEGn, assigner_code, type_code,pos1,pos2,pos3) {
	var pid = &apos;&apos;;
	try {
		var pidcount = SEGn.length();
		for(var index = 0; index &lt; pidcount; index++)
		{
			if(SEGn[pos1][index] != null &amp;&amp; SEGn[pos2][index] != null) {
				if(SEGn[pos1][index].toString() == assigner_code &amp;&amp; SEGn[pos2][index].toString() == type_code) 
				{
					pid = SEGn[pos3][index].toString();
					break;
				}
			}

		}
		return pid;
	}
	catch (e) {
    	throw new Error(&quot; in getPID &quot; + e.toString());
	}
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8Q1JJU3xMSVZFfHx8MjAxMTA3MjYxNDA2MTl8fE9SR15PMjB8UkVTUE9OU0VRNDI1
MDU5NzFUNDMwMjAxNjJ8UHwyLjQNTVNBfEFFfFE0MjUwNTk3MVQ0MzAyMDE2Mg1QSUR8fHwxMDA2
MjYyOV5eXlJCRjAzXk1SfHxTQ09UVF5DQVJPTHx8MTk2NTEwMDcNT1JDfFVBfDY0MDgzNzN8fHx8
fF5eXjIwMTEwNzI2MTQwNXx8MjAxMTA3MjYxNDA2MTl8fHxDNDQxNTI2Nl5KQUNLU09OLCBXSUxM
SUFNfHx8fE9FXk9yZGVyIGV4aXN0cyBvbiBDUklTIFdBUk5JTkcscmVmZXJyYWwgc291cmNlIGRv
ZXMgbm90IGV4aXN0IG9uIENSSVMsd2FyZCBjb2RlIGlzIGJsYW5rfDExMA1PQlJ8fDY0MDgzNzN8
fFhGSUlMXlhSIEZpbmdlciBJbmRleCBMdHx8fHx8fHx8fHx8fHx8fHx8fHx8Ug==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">true</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">true</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Allow ORG</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;ORG&quot;);</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;ORG&quot;);</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
    <connector>
      <name>OMG-destination</name>
      <properties>
        <property name="DataType">LLP Sender</property>
        <property name="ackTimeout">120000</property>
        <property name="bufferSize">65536</property>
        <property name="charEncoding">hex</property>
        <property name="charsetEncoding">DEFAULT_ENCODING</property>
        <property name="host">${destIp}</property>
        <property name="keepSendSocketOpen">1</property>
        <property name="maxRetryCount">2</property>
        <property name="messageEnd">0x1C</property>
        <property name="messageStart">0x0B</property>
        <property name="port">${destPort}</property>
        <property name="processHl7AckResponse">1</property>
        <property name="queueAckTimeout">1</property>
        <property name="queuePollInterval">200</property>
        <property name="reconnectMillisecs">10000</property>
        <property name="recordSeparator">0x0D</property>
        <property name="replyChannelId">sink</property>
        <property name="rotateQueue">0</property>
        <property name="segmentEnd">0x0D</property>
        <property name="sendTimeout">5000</property>
        <property name="tcpProtocolClassName">org.mule.providers.tcp.protocols.TcpProtocol</property>
        <property name="template">${message.encodedData}</property>
        <property name="usePersistentQueues">1</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>main</name>
            <script>try {
		// Get reference to translator
		var translator = getTranslator();
		// Process required segments.
		tranMsh();
		tranPid();
		tranPv1();
		tranOrc();
		tranObr();
		tranNte(); 
}
catch (e) {
		stopChannel(channelId);
		throw new Error(&quot;Channel &quot; + getChannelName() + &quot; ( Event Sorter ) &quot; + e.toString());
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>try {
		// Get reference to translator
		var translator = getTranslator();
		// Process required segments.
		tranMsh();
		tranPid();
		tranPv1();
		tranOrc();
		tranObr();
		tranNte(); 
}
catch (e) {
		stopChannel(channelId);
		throw new Error(&quot;Channel &quot; + getChannelName() + &quot; ( Event Sorter ) &quot; + e.toString());
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>MSH</name>
            <script>function tranMsh() {
	try {

		var msgtype = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
		var msgevent = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();

		// Set app, facility and message type
		tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = &apos;OXON_TIE_RAD&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = &apos;OXON&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] =  getCmEnv();
		tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = &apos;OXON&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = &apos;ORM&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = &apos;O01&apos;;

		// Copy the date/time of message
		tmp[&apos;MSH&apos;][&apos;MSH.7&apos;] = msg[&apos;MSH&apos;][&apos;MSH.7&apos;];

		// Append exam key to message control ID (BT principles)
		tmp[&apos;MSH&apos;][&apos;MSH.10&apos;] = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() + &quot;-&quot; + msg[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;].toString();
	}

	catch (e) {
		throw new Error(&quot; in tranMsh &quot; + e.toString());
	}
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>function tranMsh() {
	try {

		var msgtype = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString();
		var msgevent = msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;].toString();

		// Set app, facility and message type
		tmp[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = &apos;OXON_TIE_RAD&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = &apos;OXON&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] =  getCmEnv();
		tmp[&apos;MSH&apos;][&apos;MSH.6&apos;][&apos;MSH.6.1&apos;] = &apos;OXON&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = &apos;ORM&apos;;
		tmp[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = &apos;O01&apos;;

		// Copy the date/time of message
		tmp[&apos;MSH&apos;][&apos;MSH.7&apos;] = msg[&apos;MSH&apos;][&apos;MSH.7&apos;];

		// Append exam key to message control ID (BT principles)
		tmp[&apos;MSH&apos;][&apos;MSH.10&apos;] = msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() + &quot;-&quot; + msg[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;].toString();
	}

	catch (e) {
		throw new Error(&quot; in tranMsh &quot; + e.toString());
	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>PID</name>
            <script>function tranPid() {
	try {
		// MRD: 23/05/2011
		// Iterate over patient identifiers
		// output MRN and NHS only
		var newPID3 = &quot;&quot;;
		var pidCount = 0;

		for each ( pid3 in msg[&apos;PID&apos;][&apos;PID.3&apos;])	{
			auth = pid3[&apos;PID.3.4&apos;].toString();
			type = pid3[&apos;PID.3.5&apos;].toString();
		
       	 if (auth == &quot;NHS&quot; ) {
			if(pidCount &gt; 0) newPID3 += &quot;~&quot;;
				newPID3 += removeSpaces(pid3[&apos;PID.3.1&apos;].toString()) + &quot;^^^NHSNBR^NHSNMBR&quot;;
				pidCount++;
			}
			else if (auth == &quot;RBF03&quot; || auth == &quot;RTH&quot;) {
				if(pidCount &gt; 0) newPID3 += &quot;~&quot;;
				newPID3 += pid3[&apos;PID.3.1&apos;].toString() + &quot;^^^&quot; + &quot;NOC&quot; + &quot;-MRN^MRN&quot;;
				pidCount++;
			}
		}
		tmp[&apos;PID&apos;][&apos;PID.3&apos;] = newPID3;	

		// Move patient demographics for admin purposes
		tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
		tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
		tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	}
	catch (e) {
		throw new Error( &quot; in  tranPid &quot; + e.toString());

	}
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>function tranPid() {
	try {
		// MRD: 23/05/2011
		// Iterate over patient identifiers
		// output MRN and NHS only
		var newPID3 = &quot;&quot;;
		var pidCount = 0;

		for each ( pid3 in msg[&apos;PID&apos;][&apos;PID.3&apos;])	{
			auth = pid3[&apos;PID.3.4&apos;].toString();
			type = pid3[&apos;PID.3.5&apos;].toString();
		
       	 if (auth == &quot;NHS&quot; ) {
			if(pidCount &gt; 0) newPID3 += &quot;~&quot;;
				newPID3 += removeSpaces(pid3[&apos;PID.3.1&apos;].toString()) + &quot;^^^NHSNBR^NHSNMBR&quot;;
				pidCount++;
			}
			else if (auth == &quot;RBF03&quot; || auth == &quot;RTH&quot;) {
				if(pidCount &gt; 0) newPID3 += &quot;~&quot;;
				newPID3 += pid3[&apos;PID.3.1&apos;].toString() + &quot;^^^&quot; + &quot;NOC&quot; + &quot;-MRN^MRN&quot;;
				pidCount++;
			}
		}
		tmp[&apos;PID&apos;][&apos;PID.3&apos;] = newPID3;	

		// Move patient demographics for admin purposes
		tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
		tmp[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
		tmp[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
	}
	catch (e) {
		throw new Error( &quot; in  tranPid &quot; + e.toString());

	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>3</sequenceNumber>
            <name>PV1</name>
            <script>function tranPv1() {
	try {
		// Copy the visit number
		tmp[&apos;PV1&apos;][&apos;PV1.19&apos;] = msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
	}
	catch (e) {
		throw new Error(&quot; in tranPv1 &quot; + e.toString());
	}
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>function tranPv1() {
	try {
		// Copy the visit number
		tmp[&apos;PV1&apos;][&apos;PV1.19&apos;] = msg[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString();
	}
	catch (e) {
		throw new Error(&quot; in tranPv1 &quot; + e.toString());
	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>4</sequenceNumber>
            <name>ORC</name>
            <script>function tranOrc() {
	// Need to translate the status code from the CRIS z&apos;Z&apos; code to an EPR status
	// If the translated status code is CA or the original control code is CA
	// need to translate the control code to OC
	// An order comment string will be derived from the original status code later
	// to be output as an order comment.  

	try {

		// Translate status code and order control code
		var controlcode = msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString();
		var statuscode = msg[&apos;ORC&apos;][&apos;ORC.5&apos;][&apos;ORC.5.1&apos;].toString();
		var newStatusCode = &quot;&quot;;

    
    	newStatusCode = translateAndLog(translator, 
                                    &quot;STATUS-CODE&quot;,
                                    statuscode,
									&quot;ORC.5.1&quot;).toString();
		// Deal with the control code	
		// make sure cancelations have the correct control code
		if (newStatusCode == &quot;CA&quot; ) {
			tmp[&apos;ORC&apos;][&apos;ORC.1&apos;] = &quot;OC&quot;;
		}
		// Deal with send number pattern
    	// Change NW to SN for send number (reflex) order pattern
		else if (msgevent == &quot;O19&quot; &amp;&amp; controlcode == &quot;NW&quot; ) {
			tmp[&apos;ORC&apos;][&apos;ORC.1&apos;] = &quot;SN&quot;;
			//Override SC status if sent by RIS
			if(statuscode == &quot;SC&quot;) {	
				newStatusCode = &quot;EXAMSTA&quot;;
			}
		}
		// output order control code
		else tmp[&apos;ORC&apos;][&apos;ORC.1&apos;] = controlcode;

		// output new order status code
		tmp[&apos;ORC&apos;][&apos;ORC.5&apos;] = newStatusCode;

		// Pass the placer order number
		tmp[&apos;ORC&apos;][&apos;ORC.2&apos;] = msg[&apos;ORC&apos;][&apos;ORC.2&apos;];

		// Pass the filler order number
		tmp[&apos;ORC&apos;][&apos;ORC.3&apos;] = msg[&apos;ORC&apos;][&apos;ORC.3&apos;];

		// Ensure filler order number is unique within the domain (BT principles)
		tmp[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;] = msg[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;].toString();

		// Pass date/time of transaction
		tmp[&apos;ORC&apos;][&apos;ORC.9&apos;] = msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();

		// Copy original CM ordering provider code 
		tmp[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;ORC.12.1&apos;] = msg[&apos;OBR&apos;][&apos;OBR.18&apos;][&apos;OBR.18.1&apos;].toString();
	
	}
	catch (e) {
		throw new Error(&quot; in tranOrc &quot; + e.toString());
	}
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>function tranOrc() {
	// Need to translate the status code from the CRIS z&apos;Z&apos; code to an EPR status
	// If the translated status code is CA or the original control code is CA
	// need to translate the control code to OC
	// An order comment string will be derived from the original status code later
	// to be output as an order comment.  

	try {

		// Translate status code and order control code
		var controlcode = msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString();
		var statuscode = msg[&apos;ORC&apos;][&apos;ORC.5&apos;][&apos;ORC.5.1&apos;].toString();
		var newStatusCode = &quot;&quot;;

    
    	newStatusCode = translateAndLog(translator, 
                                    &quot;STATUS-CODE&quot;,
                                    statuscode,
									&quot;ORC.5.1&quot;).toString();
		// Deal with the control code	
		// make sure cancelations have the correct control code
		if (newStatusCode == &quot;CA&quot; ) {
			tmp[&apos;ORC&apos;][&apos;ORC.1&apos;] = &quot;OC&quot;;
		}
		// Deal with send number pattern
    	// Change NW to SN for send number (reflex) order pattern
		else if (msgevent == &quot;O19&quot; &amp;&amp; controlcode == &quot;NW&quot; ) {
			tmp[&apos;ORC&apos;][&apos;ORC.1&apos;] = &quot;SN&quot;;
			//Override SC status if sent by RIS
			if(statuscode == &quot;SC&quot;) {	
				newStatusCode = &quot;EXAMSTA&quot;;
			}
		}
		// output order control code
		else tmp[&apos;ORC&apos;][&apos;ORC.1&apos;] = controlcode;

		// output new order status code
		tmp[&apos;ORC&apos;][&apos;ORC.5&apos;] = newStatusCode;

		// Pass the placer order number
		tmp[&apos;ORC&apos;][&apos;ORC.2&apos;] = msg[&apos;ORC&apos;][&apos;ORC.2&apos;];

		// Pass the filler order number
		tmp[&apos;ORC&apos;][&apos;ORC.3&apos;] = msg[&apos;ORC&apos;][&apos;ORC.3&apos;];

		// Ensure filler order number is unique within the domain (BT principles)
		tmp[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;] = msg[&apos;ORC&apos;][&apos;ORC.3&apos;][&apos;ORC.3.1&apos;].toString();

		// Pass date/time of transaction
		tmp[&apos;ORC&apos;][&apos;ORC.9&apos;] = msg[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;].toString();

		// Copy original CM ordering provider code 
		tmp[&apos;ORC&apos;][&apos;ORC.12&apos;][&apos;ORC.12.1&apos;] = msg[&apos;OBR&apos;][&apos;OBR.18&apos;][&apos;OBR.18.1&apos;].toString();
	
	}
	catch (e) {
		throw new Error(&quot; in tranOrc &quot; + e.toString());
	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>5</sequenceNumber>
            <name>OBR</name>
            <script>function tranObr() {
	try {

		// Pass Placer Order Number
		tmp[&apos;OBR&apos;][&apos;OBR.2&apos;] = msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString();

		// Pass Filler Order Number
		tmp[&apos;OBR&apos;][&apos;OBR.3&apos;] = msg[&apos;ORC&apos;][&apos;ORC.3&apos;];

		// Pass service ID
		// Must translate the CRIS order code to the EPR order code
		
		var tranResult = translateAndLogWithDefault(translator, 
                         &quot;EXAM-CODE&quot;,
                         msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString(),
						 &quot;ZZDEF&quot;,
						 &quot;Default value&quot;,
						 &quot;OBR.4.1&quot;);

		tmp[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;] = tranResult.getToCode();
		tmp[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;] = tranResult.getToValue();

		// Copy observation data time from ORC.7.4
		// Temporary to cater for CRIS sending out stupid dates
		if ( msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString().substr(0,4) == &quot;2099&quot; ) { 
			tmp[&apos;OBR&apos;][&apos;OBR.7&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmm&quot;);
		}
		else {
			tmp[&apos;OBR&apos;][&apos;OBR.7&apos;] = msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString();
		}

		// Copy ordering provider code
		tmp[&apos;OBR&apos;][&apos;OBR.16&apos;] = msg[&apos;OBR&apos;][&apos;OBR.18&apos;][&apos;OBR.18.1&apos;].toString();

		// Copy filler field 2 - needed for web PACS?
		tmp[&apos;OBR&apos;][&apos;OBR.21&apos;] = msg[&apos;OBR&apos;][&apos;OBR.21&apos;][&apos;OBR.21.1&apos;].toString();

		// Copy start date/time
		// Temporary to cater for CRIS sending out stupid dates
		if ( msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString().substr(0,4) == &quot;2099&quot; ) { 
			tmp[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.4&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmm&quot;);
		}
		else {
			tmp[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.4&apos;] = msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString();
		}

    	// Translate priority
		tmp[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.6&apos;] = translateAndLog(translator, 
                                       &quot;PRIORITY&quot;,
                                       msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.6&apos;].toString(),
									   &quot;OBR.27.6&quot;).toString();

		// Copy scheduled date/time from OBR.27
		// Temporary to cater for CRIS sending out stupid dates
		if (msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString().substr(0,4) == &quot;2099&quot; ) { 
			tmp[&apos;OBR&apos;][&apos;OBR.36&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmm&quot;);
		}
		else {
			tmp[&apos;OBR&apos;][&apos;OBR.36&apos;] = msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString();
		}
	}
	catch (e) {
		throw Error(&quot; in tranObr&quot; + e.toString());
	}
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>function tranObr() {
	try {

		// Pass Placer Order Number
		tmp[&apos;OBR&apos;][&apos;OBR.2&apos;] = msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString();

		// Pass Filler Order Number
		tmp[&apos;OBR&apos;][&apos;OBR.3&apos;] = msg[&apos;ORC&apos;][&apos;ORC.3&apos;];

		// Pass service ID
		// Must translate the CRIS order code to the EPR order code
		
		var tranResult = translateAndLogWithDefault(translator, 
                         &quot;EXAM-CODE&quot;,
                         msg[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString(),
						 &quot;ZZDEF&quot;,
						 &quot;Default value&quot;,
						 &quot;OBR.4.1&quot;);

		tmp[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;] = tranResult.getToCode();
		tmp[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;] = tranResult.getToValue();

		// Copy observation data time from ORC.7.4
		// Temporary to cater for CRIS sending out stupid dates
		if ( msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString().substr(0,4) == &quot;2099&quot; ) { 
			tmp[&apos;OBR&apos;][&apos;OBR.7&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmm&quot;);
		}
		else {
			tmp[&apos;OBR&apos;][&apos;OBR.7&apos;] = msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString();
		}

		// Copy ordering provider code
		tmp[&apos;OBR&apos;][&apos;OBR.16&apos;] = msg[&apos;OBR&apos;][&apos;OBR.18&apos;][&apos;OBR.18.1&apos;].toString();

		// Copy filler field 2 - needed for web PACS?
		tmp[&apos;OBR&apos;][&apos;OBR.21&apos;] = msg[&apos;OBR&apos;][&apos;OBR.21&apos;][&apos;OBR.21.1&apos;].toString();

		// Copy start date/time
		// Temporary to cater for CRIS sending out stupid dates
		if ( msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString().substr(0,4) == &quot;2099&quot; ) { 
			tmp[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.4&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmm&quot;);
		}
		else {
			tmp[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.4&apos;] = msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString();
		}

    	// Translate priority
		tmp[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.6&apos;] = translateAndLog(translator, 
                                       &quot;PRIORITY&quot;,
                                       msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.6&apos;].toString(),
									   &quot;OBR.27.6&quot;).toString();

		// Copy scheduled date/time from OBR.27
		// Temporary to cater for CRIS sending out stupid dates
		if (msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString().substr(0,4) == &quot;2099&quot; ) { 
			tmp[&apos;OBR&apos;][&apos;OBR.36&apos;] = DateUtil.getCurrentDate(&quot;yyyyMMddHHmm&quot;);
		}
		else {
			tmp[&apos;OBR&apos;][&apos;OBR.36&apos;] = msg[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString();
		}
	}
	catch (e) {
		throw Error(&quot; in tranObr&quot; + e.toString());
	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>6</sequenceNumber>
            <name>NTE</name>
            <script>function tranNte() {

	// Need to get a order comment for the status passed in from CRIS
	// Output in NTE segments to qualify the departmental status 
	// when displayed in Millennium.
	// Send back scheduled date in the comment if the status code 
	// indicates that the order has been booked on CRIS 

	try {
	
		// Do not process status comment NTE if reflex (NW) message
		if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString() != &quot;NW&quot; ) {
		
			// MRD: 19/05/11 Use translator to get the comment for the recieved status code
    		var statusReason =  translateWithDefault(translator, 
                                        &quot;STATUS-COMMENT&quot;,
                                         msg[&apos;ORC&apos;][&apos;ORC.5&apos;][&apos;ORC.5.1&apos;].toString(),
										 &quot;Order Status Updated&quot;,
										 &quot;ORC.5.1&quot;).toString();		
	 
			tmp[&apos;NTE&apos;][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = statusReason;
			tmp[&apos;ORC&apos;][&apos;ORC.16&apos;][&apos;ORC.16.2&apos;] = statusReason;
	
			// If outbound status is scheduled put the schduled D/T in the comment
			if ( tmp[&apos;ORC&apos;][&apos;ORC.5&apos;].toString() == &quot;EXAMREM&quot; ) {
	   			tmp[&apos;NTE&apos;][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = &quot;Exam Booked For: &quot; + safeDateFormat(&quot;yyyyMMddHHmm&quot;, &quot;HH:mm dd/MM/yyyy&quot;, msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString());	
			}
		}
	}
	catch (e) {
		throw new Error(&quot; in tranNte &quot; + e.toString());
	}
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>function tranNte() {

	// Need to get a order comment for the status passed in from CRIS
	// Output in NTE segments to qualify the departmental status 
	// when displayed in Millennium.
	// Send back scheduled date in the comment if the status code 
	// indicates that the order has been booked on CRIS 

	try {
	
		// Do not process status comment NTE if reflex (NW) message
		if(msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString() != &quot;NW&quot; ) {
		
			// MRD: 19/05/11 Use translator to get the comment for the recieved status code
    		var statusReason =  translateWithDefault(translator, 
                                        &quot;STATUS-COMMENT&quot;,
                                         msg[&apos;ORC&apos;][&apos;ORC.5&apos;][&apos;ORC.5.1&apos;].toString(),
										 &quot;Order Status Updated&quot;,
										 &quot;ORC.5.1&quot;).toString();		
	 
			tmp[&apos;NTE&apos;][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = statusReason;
			tmp[&apos;ORC&apos;][&apos;ORC.16&apos;][&apos;ORC.16.2&apos;] = statusReason;
	
			// If outbound status is scheduled put the schduled D/T in the comment
			if ( tmp[&apos;ORC&apos;][&apos;ORC.5&apos;].toString() == &quot;EXAMREM&quot; ) {
	   			tmp[&apos;NTE&apos;][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = &quot;Exam Booked For: &quot; + safeDateFormat(&quot;yyyyMMddHHmm&quot;, &quot;HH:mm dd/MM/yyyy&quot;, msg[&apos;ORC&apos;][&apos;ORC.7&apos;][&apos;ORC.7.4&apos;].toString());	
			}
		}
	}
	catch (e) {
		throw new Error(&quot; in tranNte &quot; + e.toString());
	}
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>7</sequenceNumber>
            <name>Local Functions</name>
            <script>//function translateWithLogging(transRef, transSet, value )
//{
//	
//	var tranResult = new Packages.nhs.ohis.si.translator.data.TranslationResult(&quot;&quot;,&quot;&quot;, Packages.nhs.ohis.si.translator.data.TranslationResultEnum.FAIL); 
//	
//	if(value.length &gt; 0) {
//		tranResult = transRef.translate(transSet,value);
//		
//		if(tranResult.getOutcome() != Packages.nhs.ohis.si.translator.data.TranslationResultEnum.SUCCESS){
//			logTranslationError(transSet, 
//                     			value, 
//                       			messageObject.getId().toString(),
//                       			&quot;This is the comment&quot;,
//                       			&quot;translation_failure_logger&quot;);
//    	}
//
//	}
//	return tranResult;
//}

//function translateWithDefault(transRef, transSet, value, defaultCode )
//{
//	var tranResult = new Packages.nhs.ohis.si.translator.data.TranslationResult(&quot;&quot;,&quot;&quot;, Packages.nhs.ohis.si.translator.data.TranslationResultEnum.FAIL);
//
//	if(value.length &gt; 0) {
//		tranResult = transRef.translate(transSet,value);
//		if(tranResult.getOutcome() != Packages.nhs.ohis.si.translator.data.TranslationResultEnum.SUCCESS){
//			tranResult.setToCode(defaultCode);
//			tranResult.setToValue(defaultCode);
//  	}
//	}
//	return tranResult;
//}

//function translateWithLoggingDefault(transRef, transSet, value, defaultCode )
//{
//	var tranResult = new Packages.nhs.ohis.si.translator.data.TranslationResult(&quot;&quot;,&quot;&quot;, Packages.nhs.ohis.si.translator.data.TranslationResultEnum.FAIL);
//     
//	if(value.length &gt; 0) {                                                                          
//		tranResult = transRef.translate(transSet,value);
//		if(tranResult.getOutcome() != Packages.nhs.ohis.si.translator.data.TranslationResultEnum.SUCCESS){
//			tranResult.setToCode(defaultCode);
//			tranResult.setToValue(defaultCode);
//			
//			logTranslationError(transSet, 
//                     			value, 
//                       			messageObject.getId().toString(),
//                       			&quot;This is the comment&quot;,
//                       			&quot;translation_failure_logger&quot;);
//			
//    	}
//	}
//	return tranResult;
//}

function safeDateFormat(inFormat, outFormat, value)
{
	var date = &quot;&quot;;

	if(value.length &gt; 0) 
		date = DateUtil.convertDate(inFormat, outFormat, value);
	
	return date;
}

function removeSpaces(input)
{
	// match 1 or more space characters
	var regX2 =  new RegExp(&quot;[ ]{1,}&quot;, &quot;g&quot;);
	
    return input.replace(regX2, &quot;&quot;);

}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>//function translateWithLogging(transRef, transSet, value )
//{
//	
//	var tranResult = new Packages.nhs.ohis.si.translator.data.TranslationResult(&quot;&quot;,&quot;&quot;, Packages.nhs.ohis.si.translator.data.TranslationResultEnum.FAIL); 
//	
//	if(value.length &gt; 0) {
//		tranResult = transRef.translate(transSet,value);
//		
//		if(tranResult.getOutcome() != Packages.nhs.ohis.si.translator.data.TranslationResultEnum.SUCCESS){
//			logTranslationError(transSet, 
//                     			value, 
//                       			messageObject.getId().toString(),
//                       			&quot;This is the comment&quot;,
//                       			&quot;translation_failure_logger&quot;);
//    	}
//
//	}
//	return tranResult;
//}

//function translateWithDefault(transRef, transSet, value, defaultCode )
//{
//	var tranResult = new Packages.nhs.ohis.si.translator.data.TranslationResult(&quot;&quot;,&quot;&quot;, Packages.nhs.ohis.si.translator.data.TranslationResultEnum.FAIL);
//
//	if(value.length &gt; 0) {
//		tranResult = transRef.translate(transSet,value);
//		if(tranResult.getOutcome() != Packages.nhs.ohis.si.translator.data.TranslationResultEnum.SUCCESS){
//			tranResult.setToCode(defaultCode);
//			tranResult.setToValue(defaultCode);
//  	}
//	}
//	return tranResult;
//}

//function translateWithLoggingDefault(transRef, transSet, value, defaultCode )
//{
//	var tranResult = new Packages.nhs.ohis.si.translator.data.TranslationResult(&quot;&quot;,&quot;&quot;, Packages.nhs.ohis.si.translator.data.TranslationResultEnum.FAIL);
//     
//	if(value.length &gt; 0) {                                                                          
//		tranResult = transRef.translate(transSet,value);
//		if(tranResult.getOutcome() != Packages.nhs.ohis.si.translator.data.TranslationResultEnum.SUCCESS){
//			tranResult.setToCode(defaultCode);
//			tranResult.setToValue(defaultCode);
//			
//			logTranslationError(transSet, 
//                     			value, 
//                       			messageObject.getId().toString(),
//                       			&quot;This is the comment&quot;,
//                       			&quot;translation_failure_logger&quot;);
//			
//    	}
//	}
//	return tranResult;
//}

function safeDateFormat(inFormat, outFormat, value)
{
	var date = &quot;&quot;;

	if(value.length &gt; 0) 
		date = DateUtil.convertDate(inFormat, outFormat, value);
	
	return date;
}

function removeSpaces(input)
{
	// match 1 or more space characters
	var regX2 =  new RegExp(&quot;[ ]{1,}&quot;, &quot;g&quot;);
	
    return input.replace(regX2, &quot;&quot;);

}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">TVNIfF5+XCZ8UkJGX1RFU1RfUklTfFJCRnxSQkZfVEVTVF9USUV8UkJGfDIwMTEwNTIwMTMwMjM3
fHxPTUdeTzE5fDIzMzY4ODUzNnxQfDIuNHx8fHx8fHwNUElEfHx8MjQwNF5eXkNSSVNeUEl+MTAw
NjI3NDZeXl5SQkYwM15NUnx8Qk9TVE9OXkFQUklMfHwxOTYyMDcwNHxGfHx8NiBDQUxJQkFOIE1F
V1NeSEVBVEhDT1RFXl5XQVJXSUNLXkNWMzQgNkZTfHwwMTkyNjU3ODk0NXx8fHx8fHx8fEF8fHx8
fHx8IiJ8Tg1QVjF8fHx8fHx8fHx8fHx8fHx8fHxBfDQzODY1Ng1PUkN8U0N8NjIxMTExNHw0MDE0
XkNSSVN8fFpBVHx8Xl5eMjAxMTA1MjAxMzAyXl41fHwyMDExMDUyMDEzMDJ8UklTVFJBSU58fEMx
NTI0OTcwXkJVUkdFIFBEfFJCRjAzV0FSREN8fDIwMTEwNTExMDAwMHx8MzAwfFJCRjAzfFJJU1RS
QUlOfHxeXlJCRjAzDU9CUnx8NjIxMTExNHw0MDE0XkNSSVN8WENIRVNeWFIgQ2hlc3R8fHx8fHx8
fHx8fHx8fEMxNTI0OTcwfHwzODMzfFJCRjAwMDA0MDE0fHx8Unx8fF5eXjIwMTEwNTIwMTMwMl5e
NXx8fHx8fHxeMjAxMTA1MjBeMjAxMTA1MjBeXlhSNF5eUkJGMDM=</inboundTemplate>
        <outboundTemplate encoding="base64">TVNIfF5+XCZ8T1hPTl9USUVfUkFEfE9YT058U0MwNFBST0R8T1hPTnx8fE9STV5PMDF8fFB8Mi4z
DVBJRHx8fHx8Xnx8DVBWMXx8fHx8fHx8fHx8fHx8fHx8fHwNT1JDfHx8fHx8fHx8fHx8Xl5eXl5e
Xl5EUk5CUl5QUlNOTHx8fHxeDU9CUnx8fHxefHx8fHx8fHx8fHx8fHx8fHx8fHx8fHxeXl5eXnx8
fHx8fHx8fApOVEV8MXxPRFJDTU5UfAoK</outboundTemplate>
        <inboundProtocol>HL7V2</inboundProtocol>
        <outboundProtocol>HL7V2</outboundProtocol>
        <inboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">true</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="convertLFtoCR">true</property>
          <property name="handleRepetitions">true</property>
          <property name="handleSubcomponents">true</property>
          <property name="stripNamespaces">true</property>
          <property name="useStrictParser">false</property>
          <property name="useStrictValidation">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>Allow OMG</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;OMG&quot;);</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return (msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;OMG&quot;);</script>
            <operator>NONE</operator>
          </rule>
          <rule>
            <sequenceNumber>1</sequenceNumber>
            <name>Only pass if has placer order number</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>// suppress ORM messages originating from direct referral orders
return ((msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString().length &gt; 0) || (msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString() == &quot;NW&quot;));</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>// suppress ORM messages originating from direct referral orders
return ((msg[&apos;ORC&apos;][&apos;ORC.2&apos;][&apos;ORC.2.1&apos;].toString().length &gt; 0) || (msg[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;].toString() == &quot;NW&quot;));</script>
            <operator>AND</operator>
          </rule>
        </rules>
      </filter>
      <transportName>LLP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.2.1.5861</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">true</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">5</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>return;</postprocessingScript>
  <deployScript>try
{	
	/*
		30-10-2010 HS 
		Hardcode the name of the channel
	*/
	globalMap.put(channelId,&apos;Q_RIS_ORM_EPR&apos;);

	setQueueDBConnection();

	//Initialize translator	
	var translator = Packages.nhs.ohis.si.translator.Translator();
	translator.addChannelTranslationSets(channelName, getQueueDBConnection());
	
     setTranslator(channelId, translator);	
    //Translator logic end

	// set end point adresses based on deployment environment DEV, TEST, PROD
	setDestEndPointByEnv(&apos;127.0.0.1&apos;, &apos;30050&apos;, &apos;10.201.22.165, 30050&apos;, &apos;155.231.29.83&apos;, &apos;30050&apos;)

	// set the CM environment name ased on deployment environment for use in MSH
	setCmEnv();

	return;
}
catch (e)
{
	stopChannel(channelId);
	throw new Error(&quot;An exception occurred in the Deploy script of channel &apos;Q_RIS_ORM_EPR&apos;: &quot; + e.toString());
}</deployScript>
  <shutdownScript>	var translator = getTranslator();
	if (translator != null)
	{
		translator.closeTranslationSets();
		logger.info(&quot;Successfully excuted shutdown script for &quot; + getChannelName());
	}
	else
	{
		logger.error(&quot;A translator could not be found for this channel: &quot; + getChannelName());
	}

	closeQueueDbConnection();

	return;</shutdownScript>
</channel>